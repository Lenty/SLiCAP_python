/* =============================================================================================================
Assumptions and global constants
============================================================================================================= */
MAXMATRIXDIM: 25$ /* Limit for calculation of the determinant using the Gentleman-Johnson method.
                     Above this dimension the recursive Laplace expansion will be used. */
assume_pos:true$
assume_pos_pred:symbolp$
ratprint: false$
stringdisp: true$

/* =============================================================================================================
Function:       doNoise
Arguments:      M       : MNA matrix
                nGain   : Numerator of the gain
                detCols : Columns corresponding with the detector
                Iv      : Vector with independent variables
                sources : List with equations: <srcName> = <srcValue>
                          srcName : name of an independent source
                          srcValue: value of that source
Returns:        Spectral contributions of all noise sources to the detector-referred noise 
                and the source-referred noise
Description:    Performs symbolic or numeric noise analysis.
============================================================================================================= */
doNoise(M, nGain, detCols, Iv, sources) := block(
[den, onoise, srcName, srcValue, noiseTerm, onoiseTerms:[], inoiseTerms:[]],
den:  subst([s=%i*2*pi*f], doDet(M)),
den:  factor(den*conjugate(den)),
onoise:subst([s=%i*2*%pi*f], doNumer(M, detCols, Iv)),
if nGain # false then (nGain:subst([s = %i*2*%pi*f], nGain), 
nGain: nGain*conjugate(nGain)),
for i from 1 thru length(sources) do(
srcName    :lhs(sources[i]),
srcValue   :rhs(sources[i]),
noiseTerm  :coeff(onoise,srcName,1),
noiseTerm  :factor(noiseTerm*conjugate(noiseTerm)),
onoiseTerms:append(onoiseTerms,[factor(fullratsimp(noiseTerm/den))*srcValue]),
if n # false then inoiseTerms: append(inoiseTerms,[factor(fullratsimp(noiseTerm/nGain))*srcValue])
else inoiseTerms: append(inoiseTerms,[false])),return([onoiseTerms, inoiseTerms]))$

/* =============================================================================================================
Function:       doDCvar
Arguments:      M       : MNA matrix
                nGain   : Numerator of the gain
                detCols : Columns corresponding with the detector
                Iv      : Vector with independent variables
                sources : List with equations: <srcName> = <srcValue>
                          srcName : name of an independent source
                          srcValue: value of that source
Returns:        Variance contributions of all dcvar sources to the detector-referred variance and the 
                source-referred variance
Description:    Performs symbolic or numeric dc variance analysis.
============================================================================================================= */
doDCvar(M, nGain, detCols, Iv, sources) := block(
[den, ovar, srcName, srcValue, varTerm, ovarTerms:[], ivarTerms:[]],
M:   subst([s=0],M),
den: (doDet(M))^2,
ovar:doNumer(M, detCols, Iv),
for i from 1 thru length(sources) do (
srcName  : lhs(sources[i]),
srcValue : rhs(sources[i]),
varTerm  : coeff(ovar, srcName,1)^2,
ovarTerms: append(ovarTerms, [varTerm/den*srcValue]),
if nGain # false 
then ivarTerms: append(ivarTerms, [varTerm/nGain^2*srcValue])
else ivarTerms: append(ivarTerms, [false])),
return([ovarTerms, ivarTerms])
)$

/* =============================================================================================================
Function:       doDet
Arguments:      M: matrix
Returns:        Determinant of M 
Description:    Calculates the determinant of a matrix
============================================================================================================= */
doDet(M) :=
block(
[],
if length(M) > MAXMATRIXDIM then result: det(M) else result: newdet(M),
return(result)
)$

/* =============================================================================================================
Function:       doNumer
Arguments:      M       : MNA matrix
                detCols : Columns corresponding with the detector
                Iv      : Vector with independent variables
Description:    Returns the numerator of a transfer function
============================================================================================================= */
doNumer(M,detCols,Iv) := block(
[i],
result: 0,
for i from 1 thru length(Iv[1]) do (
if Iv[1,i] # 0  then (
   if detCols[1] # 0 then result: result + Iv[1,i] * (-1)^(i+detCols[1]) * doDet(minor(M,i,detCols[1])),
   if detCols[2] # 0 then result: result - Iv[1,i] * (-1)^(i+detCols[2]) * doDet(minor(M,i,detCols[2])))
),
return(expand(result))
)$

/* =============================================================================================================
Function:       doLaplace
Arguments:      M       : MNA matrix
                detCols : Columns corresponding with the detector
                Iv      : Vector with independent variables
                gainType: SLiCAP gainType
Description:    Returns the Laplace Transfer of a transfer function, voltage or current
============================================================================================================= */
doLaplace(M, detCols, Iv) := block([],
result:doNumer(M, detCols, Iv)/doDet(M),
return(result))$

/* =============================================================================================================
Function:       findRoots
Arguments:      expr: Laplace polynomial
Returns:        List with roots of a Laplace polynomial
Description:    Calculates the roots of a Laplace polynomial
============================================================================================================= */
findRoots(expr) :=
block
(
[lof],
lof : listofvars(expr),
if length(lof) = 1 and lof[1]=s then result: allroots(bfloat(expr))
else result: solve(expr, s),
for i from 1 thru length(result) do
result[i] : rhs(result[i]),
return(result)
)$

/* =============================================================================================================
Function:       doSolve
Arguments:      M       : MNA matrix
                Iv      : Vector with independent variables
Returns:        Laplace Transform of the network solution
Description:    Calculates the Laplace Transform of the network solution
============================================================================================================= */
doSolve(M, Iv) :=
block
(
[],
result: factor(invert(M).transpose(Iv)),
return(result)
)$

/* =============================================================================================================
Function:       doSolveDC
Arguments:      M       : MNA matrix
                Iv      : Vector with independent variables
Returns:        DC network solution
Description:    Calculates the zero-frequency value of the network solution
============================================================================================================= */
doSolveDC(M, Iv) :=
block
(
[],
M:  subst([s=0], M),
Iv: subst([s=0], Iv),
result: doSolve(M, Iv),
return(result)
)$

/* =============================================================================================================
Function:       doSolveTime
Arguments:      M       : MNA matrix
                Iv      : Vector with independent variables
Returns:        Inverse Laplace Transform of the network solution
Description:    Calculates the Inverse Laplace Transform of the network solution
============================================================================================================= */
doSolveTime(M, Iv) :=
block
(
[l, i, lof],
expr: doSolve(M, Iv),
lof: listofvars(expr),
l:length(expr),
if length(lof) = 1 and lof[1] = s then 
    for i from 1 thru l do
        expr[i][1]: newIlt(bfloat(expr[i][1]), s, t)
else
    for i from 1 thru l do
        expr[i][1]: doIlt(expr[i][1], s, t),
return(expr)
)$

/* =============================================================================================================
Function:       det
Arguments:      M: matrix
Returns:        Determinant of M 
Description:    Calculates the determinant of a matrix using recursive minor expansion
============================================================================================================= */
det(M):=
block
(
[D, dim, i],
dim: length(M),
if dim = 2 then D: M[1, 1] * M[2, 2] - M[1, 2] * M[2, 1]
else 
  block
  (
  D: 0,
  for i from 1 thru dim do 
    if M[1, i] # 0 then D: D + M[1, i] * (-1)^(i+1) * det(minor(M, 1, i))
  ),
return(expand(D))
)$

/* =============================================================================================================
Function:       newIlt
Arguments:      ratLaplace: Rational function of Laplace variable
                s         : Laplace variable
                t         : time variable
Returns:        result    : Inverse Laplace Transform of ratLaplace
Description:    Calculates the Inverse Laplace Transform of a rational function of the Laplace variable
============================================================================================================= */
newIlt(ratLaplace, s, t) :=
block
( [oldD, oldP],
  oldD: demoivre,              /* Store the old setting of demoivre   */
  oldP: polyfactor,            /* Store the old setting of polyfactor */
  demoivre   : true,           /* Set demoivre; this will write complex exponentials as trogonometric functions */
  polyfactor : true,           /* Set polyfactor; let allroots(poly) return a factorized poly */

  result: bfloat(expand(ilt(expand(num(ratLaplace))/(allroots(expand(denom(ratLaplace)))), s, t))),

  demoivre: oldD,              /* restore demoivre   */
  polyfactor, oldP,            /* restore polyfactor */
  return(result)
)$

/* =============================================================================================================
Function:       doIlt
Arguments:      expr      : Rational function of Laplace variable
                s         : Laplace variable
                t         : time variable
Returns:        result    : Inverse Laplace Transform of expr
Description:    Calculates the Inverse Laplace Transform of expr
============================================================================================================= */
doIlt(expr,s,t) := block(
[lof],
lof:listofvars(expr),
if length(lof) = 1 and lof[1] = s 
then expr:newIlt(bfloat(expr), s, t) 
else expr:ilt(expr, s, t),
return(expr))$

/* =============================================================================================================
Function:       doLoopgain
Arguments:      M       : Rational function of Laplace variable
                lgRef_1 : Loop gain reference 1
                lgRef_2 : Loop gain reference 2
Returns:        result    : Inverse Laplace Transform of expr
Description:    Calculates the Laplace Transform of the loop gain with loop gain references 1 and 2
============================================================================================================= */
doLoopGain(M, lgRef_1, lgRef_2):= block([],
M_D: subst(_LGREF_1=lgRef_1,M),
M_D: subst(_LGREF_2=lgRef_2,M_D),
D_M: doDet(M_D),
M_0: subst(_LGREF_1=0,M),
M_0: subst(_LGREF_2=0,M_0),
D_0: doDet(M_0),
result: fullratsimp((D_0-D_M)/D_0),
return(result))$

/* =============================================================================================================
Function:       doServo
Arguments:      M       : Rational function of Laplace variable
                lgRef_1 : Loop gain reference 1
                lgRef_2 : Loop gain reference 2
Returns:        result    : Inverse Laplace Transform of expr
Description:    Calculates the Laplace Transform of the servo function with loop gain references 1 and 2
============================================================================================================= */
doServo(M, lgRef_1, lgRef_2):=block([],
M_D: subst(_LGREF_1=lgRef_1,M),
M_D: subst(_LGREF_2=lgRef_2,M_D),
D_M: doDet(M_D),
M_0: subst(_LGREF_1=0,M),
M_0: subst(_LGREF_2=0,M_0),
D_0: doDet(M_0),
result: fullratsimp((D_M-D_0)/D_M),
return(result))$

compile(det)$
