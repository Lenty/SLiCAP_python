/* =============================================================================================================
Assumptions and global constants
============================================================================================================= */
MAXMATRIXDIM: 25$ /* Limit for calculation of the determinant using the Gentleman-Johnson method.
                     Above this dimension the recursive Laplace expansion will be used. */
assume_pos:true$
assume_pos_pred:symbolp$
ratprint: false$
stringdisp: true$

/* =============================================================================================================
Function:       doNoise
Arguments:      Matrix_  : MNA matrix
                nGain_   : Numerator of the gain
                detCols_ : Columns corresponding with the detector
                Iv_      : Vector with independent variables
                sources_ : List with equations: <srcName_> = <srcValue_>
                           srcName_ : name of an independent source
                           srcValue_: value of that source
Returns:        Spectral contributions of all noise sources to the detector-referred noise 
                and the source-referred noise
Description:    Performs symbolic or numeric noise analysis.
============================================================================================================= */
doNoise(Matrix_, nGain_, detCols_, Iv_, sources_) := block(
[den_, onoise_, srcName_, srcValue_, noiseTerm_, onoiseTerms_:[], inoiseTerms_:[], i],
den_:  subst([s=%i*2*pi*f], doDet(Matrix_)),
den_:  factor(den_*conjugate(den_)),
onoise_:subst([s=%i*2*%pi*f], doNumer(Matrix_, detCols_, Iv_)),
if nGain_ # false then (nGain_:subst([s = %i*2*%pi*f], nGain_), 
nGain_: nGain_*conjugate(nGain_)),
for i from 1 thru length(sources_) do(
srcName_    :lhs(sources_[i]),
srcValue_   :rhs(sources_[i]),
noiseTerm_  :coeff(onoise_,srcName_,1),
noiseTerm_  :factor(noiseTerm_*conjugate(noiseTerm_)),
onoiseTerms_:append(onoiseTerms_,[factor(fullratsimp(noiseTerm_/den_))*srcValue_]),
if nGain_ # false then inoiseTerms_: append(inoiseTerms_,[factor(fullratsimp(noiseTerm_/nGain_))*srcValue_])
else inoiseTerms_: append(inoiseTerms_,[false])),return([onoiseTerms_, inoiseTerms_]))$

/* =============================================================================================================
Function:       doDCvar
Arguments:      Matrix_  : MNA matrix
                nGain_   : Numerator of the gain
                detCols_ : Columns corresponding with the detector
                Iv_      : Vector with independent variables
                sources_ : List with equations: <srcName> = <srcValue>
                           srcName_ : name of an independent source
                           srcValue_: value of that source
Returns:        Variance contributions of all dcvar sources to the detector-referred variance and the 
                source-referred variance
Description:    Performs symbolic or numeric dc variance analysis.
============================================================================================================= */
doDCvar(Matrix_, nGain_, detCols_, Iv_, sources_) := block(
[den_, ovar_, srcName_, srcValue_, varTerm_, ovarTerms_:[], ivarTerms_:[], i],
Matrix_:   subst([s=0],Matrix_),
den_: (doDet(Matrix_))^2,
ovar_:doNumer(Matrix_, detCols_, Iv_),
for i from 1 thru length(sources_) do (
srcName_  : lhs(sources_[i]),
srcValue_ : rhs(sources_[i]),
varTerm_  : coeff(ovar_, srcName_,1)^2,
ovarTerms_: append(ovarTerms_, [varTerm_/den_*srcValue_]),
if nGain_ # false 
then ivarTerms_: append(ivarTerms_, [varTerm_/nGain_^2*srcValue_])
else ivarTerms_: append(ivarTerms_, [false])),
return([ovarTerms_, ivarTerms_])
)$

/* =============================================================================================================
Function:       doDet
Arguments:      Matrix_: matrix
Returns:        Determinant of M 
Description:    Calculates the determinant of a matrix
============================================================================================================= */
doDet(Matrix_) :=
block(
[],
if length(Matrix_) > MAXMATRIXDIM then result_: det(Matrix_) else result_: newdet(Matrix_),
return(result_)
)$

/* =============================================================================================================
Function:       doNumer
Arguments:      Matrix_  : MNA matrix
                detCols_ : Columns corresponding with the detector
                Iv_      : Vector with independent variables
Description:    Returns the Laplace transform of the numerator of the detector current or voltage
============================================================================================================= */
doNumer(Matrix_, detCols_, Iv_) :=
block
(
[],
result_ : 0,
if detCols_[1] # 0 then result_: result_ + doDet(CramerMatrix(Matrix_, Iv_, detCols_[1])),
if detCols_[2] # 0 then result_: result_ - doDet(CramerMatrix(Matrix_, Iv_, detCols_[2])),
return(expand(result_))
)$

/* =============================================================================================================
Function:       CramerMatrix
Arguments:      Matrix_: square matrix (MNA matrix)
                V_: Row vector with independent sources
                c_: column number (Number of the detector column in M)
Description:    Returns the matrix M_ in which column c_ is replaced with vector V_
============================================================================================================= */
CramerMatrix(Matrix_, V_, c_) :=
block
(
[],
CramerMatrix_ : transpose(Matrix_),
CramerMatrix_[c_] : V_[1],
return(transpose(CramerMatrix_))
)$


/* =============================================================================================================
Function:       doLaplace
Arguments:      Matrix_       : MNA matrix
                detCols_      : Columns corresponding with the detector
                Iv_           : Vector with independent variables
                gainType_     : SLiCAP gainType
Description:    Returns the Laplace Transfer of a transfer function, voltage or current
============================================================================================================= */
doLaplace(Matrix_, detCols_, Iv_) := block([],
result_:doNumer(Matrix_, detCols_, Iv_)/doDet(Matrix_),
return(result_))$

/* =============================================================================================================
Function:       findRoots
Arguments:      expr_: Laplace polynomial
Returns:        List with roots of a Laplace polynomial
Description:    Calculates the roots of a Laplace polynomial
============================================================================================================= */
findRoots(expr_) := block([i, j, lof_, m_, result_],
results_ : [],
lof_ : listofvars(expr_),
if length(lof_) = 1 and lof_[1]=s then (
    result_: allroots(bfloat(expr_)),
    for i from 1 thru length(result_) do
        results_: append(results_, [rhs(result_[i])])
    )
else (
    result_: solve(expr_, s),
    m_: multiplicities,
    for i from 1 thru length(m_) do
        for j from 1 thru m_[i] do
            results_: append(results_, [rhs(result_[i])])
        ),
return(results_)
)$

/* =============================================================================================================
Function:       doSolve
Arguments:      Matrix_       : MNA matrix
                Iv_           : Vector with independent variables
Returns:        Laplace Transform of the network solution
Description:    Calculates the Laplace Transform of the network solution
============================================================================================================= */
doSolve(Matrix_, Iv_) :=
block
(
[],
result_: factor(invert(Matrix_).transpose(Iv_)),
return(result_)
)$

/* =============================================================================================================
Function:       doSolveDC
Arguments:      Matrix_       : MNA matrix
                Iv_           : Vector with independent variables
Returns:        DC network solution
Description:    Calculates the zero-frequency value of the network solution
============================================================================================================= */
doSolveDC(Matrix_, Iv_) :=
block
(
[],
Matrix_:  subst([s=0], Matrix_),
Iv_: subst([s=0], Iv_),
result_: doSolve(Matrix_, Iv_),
return(result_)
)$

/* =============================================================================================================
Function:       doSolveTime
Arguments:      Matrix_ : MNA matrix
                Iv_     : Vector with independent variables
Returns:        Inverse Laplace Transform of the network solution
Description:    Calculates the Inverse Laplace Transform of the network solution
============================================================================================================= */
doSolveTime(Matrix_, Iv_) :=
block
(
[l_, i, lof_],
expr_: doSolve(Matrix_, Iv_),
lof_: listofvars(expr_),
l_:length(expr_),
if length(lof_) = 1 and lof_[1] = s then 
    for i from 1 thru l_ do
        expr_[i][1]: newIlt(bfloat(expr_[i][1]), s, t)
else
    for i from 1 thru l_ do
        expr_[i][1]: doIlt(expr_[i][1], s, t),
return(expr_)
)$

/* =============================================================================================================
Function:       det
Arguments:      Matrix_: matrix
Returns:        Determinant of Matrix_ 
Description:    Calculates the determinant of a matrix using recursive minor expansion
============================================================================================================= */
det(Matrix_):=
block
(
[D_, dim_, i],
dim_: length(Matrix_),
if dim_ = 2 then D_: Matrix_[1, 1] * Matrix_[2, 2] - Matrix_[1, 2] * Matrix_[2, 1]
else 
  block
  (
  D_: 0,
  for i from 1 thru dim_ do 
    if Matrix_[i, 1] # 0 then D_: D_ + Matrix_[i, 1] * (-1)^(i+1) * det(minor(Matrix_, i, 1))
  ),
return(expand(D_))
)$

/* =============================================================================================================
Function:       newIlt
Arguments:      ratLaplace_ : Rational function of Laplace variable
                s           : Laplace variable
                t           : time variable
Returns:        result_     : Inverse Laplace Transform of ratLaplace
Description:    Calculates the Inverse Laplace Transform of a rational function of the Laplace variable
============================================================================================================= */
newIlt(ratLaplace_, s, t) :=
block
( [old_, oldP_],
  oldD_: demoivre,              /* Store the old setting of demoivre   */
  oldP_: polyfactor,            /* Store the old setting of polyfactor */
  demoivre   : true,            /* Set demoivre; this will write complex exponentials as trogonometric functions */
  polyfactor : true,            /* Set polyfactor; let allroots(poly) return a factorized poly */

  result_: bfloat(expand(ilt(expand(num(ratLaplace_))/(allroots(expand(denom(ratLaplace_)))), s, t))),

  demoivre: oldD_,              /* restore demoivre   */
  polyfactor, oldP_,            /* restore polyfactor */
  return(result_)
)$

/* =============================================================================================================
Function:       doIlt
Arguments:      expr_     : Rational function of Laplace variable
                s         : Laplace variable
                t         : time variable
Returns:        result_    : Inverse Laplace Transform of expr
Description:    Calculates the Inverse Laplace Transform of expr
============================================================================================================= */
doIlt(expr_,s,t) := block(
[lof_],
lof_:listofvars(expr_),
if length(lof_) = 1 and lof_[1] = s 
then result_:newIlt(bfloat(expr_), s, t) 
else result_:ilt(expr_, s, t),
return(result_))$

/* =============================================================================================================
Function:       doLoopgain
Arguments:      Matrix_  : Rational function of Laplace variable
                lgRef_1_ : Loop gain reference 1
                lgRef_2_ : Loop gain reference 2
Returns:        result_  : Inverse Laplace Transform of expr
Description:    Calculates the Laplace Transform of the loop gain with loop gain references 1 and 2
============================================================================================================= */
doLoopGain(Matrix_, lgRef_1_, lgRef_2_):= block([M_D_, D_M_, M_0_, D_0_],
M_D_: subst(_LGREF_1=lgRef_1_,Matrix_),
M_D_: subst(_LGREF_2=lgRef_2_,M_D_),
D_M_: doDet(M_D_),
M_0_: subst(_LGREF_1=0,Matrix_),
M_0_: subst(_LGREF_2=0,M_0_),
D_0_: doDet(M_0_),
result_: fullratsimp((D_0_-D_M_)/D_0_),
return(result_))$

/* =============================================================================================================
Function:       doServo
Arguments:      Matrix_  : Rational function of Laplace variable
                lgRef_1_ : Loop gain reference 1
                lgRef_2_ : Loop gain reference 2
Returns:        result_  : Inverse Laplace Transform of expr
Description:    Calculates the Laplace Transform of the servo function with loop gain references 1 and 2
============================================================================================================= */
doServo(Matrix_, lgRef_1_, lgRef_2_):=block([],
M_D_: subst(_LGREF_1=lgRef_1_,Matrix_),
M_D_: subst(_LGREF_2=lgRef_2_,M_D_),
D_M_: doDet(M_D_),
M_0_: subst(_LGREF_1=0,Matrix_),
M_0_: subst(_LGREF_2=0,M_0_),
D_0_: doDet(M_0_),
result_: fullratsimp((D_M_-D_0_)/D_M_),
return(result_))$

compile(det)$
